// tests/zcc/default/Pass_typeid.hpp
// (C)2010 Kenneth Boyd, license: MIT.txt

// The result of the typeid operator itself isn't a compile-time expression
// (it's a std::typeinfo structure) -- but the result of == and != operators
// can be known at compile-time in simple cases.

#include <typeinfo>

// identity checks
static_assert(typeid(void)==typeid(void),"automatic success failed");
static_assert(typeid(bool)==typeid(bool),"automatic success failed");
static_assert(typeid(char)==typeid(char),"automatic success failed");
static_assert(typeid(signed char)==typeid(signed char),"automatic success failed");
static_assert(typeid(unsigned char)==typeid(unsigned char),"automatic success failed");
static_assert(typeid(short)==typeid(short),"automatic success failed");
static_assert(typeid(unsigned short)==typeid(unsigned short),"automatic success failed");
static_assert(typeid(int)==typeid(int),"automatic success failed");
static_assert(typeid(unsigned int)==typeid(unsigned int),"automatic success failed");
static_assert(typeid(long)==typeid(long),"automatic success failed");
static_assert(typeid(unsigned long)==typeid(unsigned long),"automatic success failed");
static_assert(typeid(long long)==typeid(long long),"automatic success failed");
static_assert(typeid(unsigned long long)==typeid(unsigned long long),"automatic success failed");
static_assert(typeid(float)==typeid(float),"automatic success failed");
static_assert(typeid(double)==typeid(double),"automatic success failed");
static_assert(typeid(long double)==typeid(long double),"automatic success failed");

// these three aren't remotely required by the C++ standards, but Z.C++
// wants to support C _Complex as an extension.
static_assert(typeid(float _Complex)==typeid(float _Complex),"automatic success failed");
static_assert(typeid(double _Complex)==typeid(double _Complex),"automatic success failed");
static_assert(typeid(long double _Complex)==typeid(long double _Complex),"automatic success failed");

// inequality checks
static_assert(typeid(void)!=typeid(bool),"automatic success failed");
static_assert(typeid(void)!=typeid(char),"automatic success failed");
static_assert(typeid(void)!=typeid(signed char),"automatic success failed");
static_assert(typeid(void)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(void)!=typeid(short),"automatic success failed");
static_assert(typeid(void)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(void)!=typeid(int),"automatic success failed");
static_assert(typeid(void)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(void)!=typeid(long),"automatic success failed");
static_assert(typeid(void)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(void)!=typeid(long long),"automatic success failed");
static_assert(typeid(void)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(void)!=typeid(float),"automatic success failed");
static_assert(typeid(void)!=typeid(double),"automatic success failed");
static_assert(typeid(void)!=typeid(long double),"automatic success failed");
static_assert(typeid(void)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(void)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(void)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(bool)!=typeid(void),"automatic success failed");
static_assert(typeid(bool)!=typeid(char),"automatic success failed");
static_assert(typeid(bool)!=typeid(signed char),"automatic success failed");
static_assert(typeid(bool)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(bool)!=typeid(short),"automatic success failed");
static_assert(typeid(bool)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(bool)!=typeid(int),"automatic success failed");
static_assert(typeid(bool)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(bool)!=typeid(long),"automatic success failed");
static_assert(typeid(bool)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(bool)!=typeid(long long),"automatic success failed");
static_assert(typeid(bool)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(bool)!=typeid(float),"automatic success failed");
static_assert(typeid(bool)!=typeid(double),"automatic success failed");
static_assert(typeid(bool)!=typeid(long double),"automatic success failed");
static_assert(typeid(bool)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(bool)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(bool)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(char)!=typeid(void),"automatic success failed");
static_assert(typeid(char)!=typeid(bool),"automatic success failed");
static_assert(typeid(char)!=typeid(signed char),"automatic success failed");
static_assert(typeid(char)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(char)!=typeid(short),"automatic success failed");
static_assert(typeid(char)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(char)!=typeid(int),"automatic success failed");
static_assert(typeid(char)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(char)!=typeid(long),"automatic success failed");
static_assert(typeid(char)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(char)!=typeid(long long),"automatic success failed");
static_assert(typeid(char)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(char)!=typeid(float),"automatic success failed");
static_assert(typeid(char)!=typeid(double),"automatic success failed");
static_assert(typeid(char)!=typeid(long double),"automatic success failed");
static_assert(typeid(char)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(char)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(char)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(signed char)!=typeid(void),"automatic success failed");
static_assert(typeid(signed char)!=typeid(bool),"automatic success failed");
static_assert(typeid(signed char)!=typeid(char),"automatic success failed");
static_assert(typeid(signed char)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(signed char)!=typeid(short),"automatic success failed");
static_assert(typeid(signed char)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(signed char)!=typeid(int),"automatic success failed");
static_assert(typeid(signed char)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(signed char)!=typeid(long),"automatic success failed");
static_assert(typeid(signed char)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(signed char)!=typeid(long long),"automatic success failed");
static_assert(typeid(signed char)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(signed char)!=typeid(float),"automatic success failed");
static_assert(typeid(signed char)!=typeid(double),"automatic success failed");
static_assert(typeid(signed char)!=typeid(long double),"automatic success failed");
static_assert(typeid(signed char)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(signed char)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(signed char)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(unsigned char)!=typeid(void),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(bool),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(char),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(signed char),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(short),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(int),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(long),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(long long),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(float),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(double),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(long double),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(unsigned char)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(short)!=typeid(void),"automatic success failed");
static_assert(typeid(short)!=typeid(bool),"automatic success failed");
static_assert(typeid(short)!=typeid(char),"automatic success failed");
static_assert(typeid(short)!=typeid(signed char),"automatic success failed");
static_assert(typeid(short)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(short)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(short)!=typeid(int),"automatic success failed");
static_assert(typeid(short)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(short)!=typeid(long),"automatic success failed");
static_assert(typeid(short)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(short)!=typeid(long long),"automatic success failed");
static_assert(typeid(short)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(short)!=typeid(float),"automatic success failed");
static_assert(typeid(short)!=typeid(double),"automatic success failed");
static_assert(typeid(short)!=typeid(long double),"automatic success failed");
static_assert(typeid(short)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(short)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(short)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(unsigned short)!=typeid(void),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(bool),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(char),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(signed char),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(short),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(int),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(long),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(long long),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(float),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(double),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(long double),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(unsigned short)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(int)!=typeid(void),"automatic success failed");
static_assert(typeid(int)!=typeid(bool),"automatic success failed");
static_assert(typeid(int)!=typeid(char),"automatic success failed");
static_assert(typeid(int)!=typeid(signed char),"automatic success failed");
static_assert(typeid(int)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(int)!=typeid(short),"automatic success failed");
static_assert(typeid(int)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(int)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(int)!=typeid(long),"automatic success failed");
static_assert(typeid(int)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(int)!=typeid(long long),"automatic success failed");
static_assert(typeid(int)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(int)!=typeid(float),"automatic success failed");
static_assert(typeid(int)!=typeid(double),"automatic success failed");
static_assert(typeid(int)!=typeid(long double),"automatic success failed");
static_assert(typeid(int)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(int)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(int)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(unsigned int)!=typeid(void),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(bool),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(char),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(signed char),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(short),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(int),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(long),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(long long),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(float),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(double),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(long double),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(unsigned int)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(long)!=typeid(void),"automatic success failed");
static_assert(typeid(long)!=typeid(bool),"automatic success failed");
static_assert(typeid(long)!=typeid(char),"automatic success failed");
static_assert(typeid(long)!=typeid(signed char),"automatic success failed");
static_assert(typeid(long)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(long)!=typeid(short),"automatic success failed");
static_assert(typeid(long)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(long)!=typeid(int),"automatic success failed");
static_assert(typeid(long)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(long)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(long)!=typeid(long long),"automatic success failed");
static_assert(typeid(long)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(long)!=typeid(float),"automatic success failed");
static_assert(typeid(long)!=typeid(double),"automatic success failed");
static_assert(typeid(long)!=typeid(long double),"automatic success failed");
static_assert(typeid(long)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(long)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(long)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(unsigned long)!=typeid(void),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(bool),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(char),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(signed char),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(short),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(int),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(long),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(long long),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(float),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(double),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(long double),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(unsigned long)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(long long)!=typeid(void),"automatic success failed");
static_assert(typeid(long long)!=typeid(bool),"automatic success failed");
static_assert(typeid(long long)!=typeid(char),"automatic success failed");
static_assert(typeid(long long)!=typeid(signed char),"automatic success failed");
static_assert(typeid(long long)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(long long)!=typeid(short),"automatic success failed");
static_assert(typeid(long long)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(long long)!=typeid(int),"automatic success failed");
static_assert(typeid(long long)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(long long)!=typeid(long),"automatic success failed");
static_assert(typeid(long long)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(long long)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(long long)!=typeid(float),"automatic success failed");
static_assert(typeid(long long)!=typeid(double),"automatic success failed");
static_assert(typeid(long long)!=typeid(long double),"automatic success failed");
static_assert(typeid(long long)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(long long)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(long long)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(unsigned long long)!=typeid(void),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(bool),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(char),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(signed char),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(short),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(int),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(long),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(long long),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(float),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(double),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(long double),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(unsigned long long)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(float)!=typeid(void),"automatic success failed");
static_assert(typeid(float)!=typeid(bool),"automatic success failed");
static_assert(typeid(float)!=typeid(char),"automatic success failed");
static_assert(typeid(float)!=typeid(signed char),"automatic success failed");
static_assert(typeid(float)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(float)!=typeid(short),"automatic success failed");
static_assert(typeid(float)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(float)!=typeid(int),"automatic success failed");
static_assert(typeid(float)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(float)!=typeid(long),"automatic success failed");
static_assert(typeid(float)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(float)!=typeid(long long),"automatic success failed");
static_assert(typeid(float)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(float)!=typeid(double),"automatic success failed");
static_assert(typeid(float)!=typeid(long double),"automatic success failed");
static_assert(typeid(float)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(float)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(float)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(double)!=typeid(void),"automatic success failed");
static_assert(typeid(double)!=typeid(bool),"automatic success failed");
static_assert(typeid(double)!=typeid(char),"automatic success failed");
static_assert(typeid(double)!=typeid(signed char),"automatic success failed");
static_assert(typeid(double)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(double)!=typeid(short),"automatic success failed");
static_assert(typeid(double)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(double)!=typeid(int),"automatic success failed");
static_assert(typeid(double)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(double)!=typeid(long),"automatic success failed");
static_assert(typeid(double)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(double)!=typeid(long long),"automatic success failed");
static_assert(typeid(double)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(double)!=typeid(float),"automatic success failed");
static_assert(typeid(double)!=typeid(long double),"automatic success failed");
static_assert(typeid(double)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(double)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(double)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(long double)!=typeid(void),"automatic success failed");
static_assert(typeid(long double)!=typeid(bool),"automatic success failed");
static_assert(typeid(long double)!=typeid(char),"automatic success failed");
static_assert(typeid(long double)!=typeid(signed char),"automatic success failed");
static_assert(typeid(long double)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(long double)!=typeid(short),"automatic success failed");
static_assert(typeid(long double)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(long double)!=typeid(int),"automatic success failed");
static_assert(typeid(long double)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(long double)!=typeid(long),"automatic success failed");
static_assert(typeid(long double)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(long double)!=typeid(long long),"automatic success failed");
static_assert(typeid(long double)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(long double)!=typeid(float),"automatic success failed");
static_assert(typeid(long double)!=typeid(double),"automatic success failed");
static_assert(typeid(long double)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(long double)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(long double)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(float _Complex)!=typeid(void),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(bool),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(char),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(signed char),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(short),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(int),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(long),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(long long),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(float),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(double),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(long double),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(double _Complex),"automatic success failed");
static_assert(typeid(float _Complex)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(double _Complex)!=typeid(void),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(bool),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(char),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(signed char),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(short),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(int),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(long),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(long long),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(float),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(double),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(long double),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(double _Complex)!=typeid(long double _Complex),"automatic success failed");

static_assert(typeid(long double _Complex)!=typeid(void),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(bool),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(char),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(signed char),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(unsigned char),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(short),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(unsigned short),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(int),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(unsigned int),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(long),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(unsigned long),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(long long),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(unsigned long long),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(float),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(double),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(long double),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(float _Complex),"automatic success failed");
static_assert(typeid(long double _Complex)!=typeid(double _Complex),"automatic success failed");

