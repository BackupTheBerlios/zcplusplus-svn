########
ProgObjects = {	'z_cpp':('z_cpp','errors','langroute','AtomicString','str_aux','filesystem','CPUInfo','struct_type','type_system','ParseTree','type_spec','CSupport','C_PPNumCore','C_PPDecimalInteger','C_PPOctalInteger','C_PPHexInteger','C_PPDecimalFloat','C_PPHexFloat','unsigned_aux','Trigraph','Flat_UNI','load_src','CPreproc','CPreproc_autogen'),
				'zcc':('zcc','errors','langroute','AtomicString','str_aux','filesystem','CPUInfo','struct_type','type_system','ParseTree','type_spec','CSupport','C_PPNumCore','C_PPDecimalInteger','C_PPOctalInteger','C_PPHexInteger','C_PPDecimalFloat','C_PPHexFloat','unsigned_aux','Trigraph','Flat_UNI','load_src','CPreproc','CPreproc_autogen','ZParser')}
MainPrograms = ['z_cpp','zcc']

# process control
C_assembly_preprocessing = ''
object_strip = ''
#object_strip = 'strip --preserve-dates --strip-unneeded $*.o'

# defines catalog
# ZAIMONI_FORCE_ISO: try to build as ISO C++ rather than with custom memory manager (pre-alpha)
C_defines = []

# language
CPP_suffix = '.cpp'
CPP_libraries = ' -lz_langconf -lz_log_adapter -lz_stdio_log -lz_mutex -lz_format_util' # -mwindows -mno-cygwin
CPP_override_libraries = {}

if 0==C_defines.count('ZAIMONI_FORCE_ISO'):
	CPP_libraries = '-lz_langconf '+CPP_libraries+' -lz_memory'
else:
	CPP_libraries = '-lz_langconf_iso '+CPP_libraries

C_enabled = ''
C_hard_nonsystem_includedirs = []
C_soft_nonsystem_includedirs = []
C_backtrack_dirs = []

